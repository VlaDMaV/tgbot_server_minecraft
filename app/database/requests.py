import re
import socket
import asyncio
import logging
import paramiko
from datetime import datetime, timedelta
from mcstatus import JavaServer
from mcrcon import MCRcon

from aiogram import Bot
from app.database.models import async_session
from app.database.models import User
from sqlalchemy import func, select, update

import app.keyboards as kb
import app.text as cs
from aiogram.types import Message
from config import config
from app.utils.rcon_utils import RconClient


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    handlers=[logging.StreamHandler()]
)

bot = Bot(token=config.bot_token.get_secret_value())


async def set_user(tg_id, name=None, username=None, is_subscribed=True):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))

        if not user:
            user = User(
                tg_id=tg_id,
                name=name,
                username=username,
                is_subscribed=is_subscribed if is_subscribed is not None else False,
                subscribed_at=(datetime.utcnow() + timedelta(hours=3)) if is_subscribed else None,
                created_at=datetime.utcnow() + timedelta(hours=3)
            )
            session.add(user)
            await session.commit()
        else:
            updated = False
            if (name is not None and user.name != name):
                user.name = name
                updated = True
            if (username is not None and user.username != username):
                user.username = username
                updated = True

            if is_subscribed is not None and user.is_subscribed != is_subscribed:
                user.is_subscribed = is_subscribed
                user.subscribed_at = (datetime.utcnow() + timedelta(hours=3)) if is_subscribed else None
                updated = True

            if updated:
                await session.commit()


async def get_user(tg_id: int):
    async with async_session() as session:
        return await session.scalar(select(User).where(User.tg_id == tg_id))
    

async def subscribe_user(tg_id: int, name: str, username: str | None = None) -> User:
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return await set_user(
        tg_id=tg_id,
        name=name,
        username=username,
        is_subscribed=True
    )

async def unsubscribe_user(tg_id: int) -> User | None:
    """–û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return await set_user(
        tg_id=tg_id, 
        is_subscribed=False
    )

async def get_subscribed_users() -> list[User]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        result = await session.execute(
            select(User)
            .where(User.is_subscribed == True)
        )
        return result.scalars().all()

async def get_all_users() -> list[User]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        result = await session.execute(select(User))
        return result.scalars().all()


async def is_server_running():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Minecraft-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª Minecraft.
    """
    
    try:
        server = await JavaServer.async_lookup(f"{config.mc_host.get_secret_value()}:{config.mc_port}")
        status = await asyncio.wait_for(server.async_status(), timeout=2.0)
        return True
        
    except (socket.gaierror, ConnectionRefusedError, asyncio.TimeoutError):
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False
    

async def ping_loop(bot: Bot):
    state = "up"
    failure_count = 0
    success_count = 0

    while True:
        is_up = await is_server_running()

        if is_up:
            success_count += 1
            failure_count = 0
        else:
            failure_count += 1
            success_count = 0

        if is_up:
            if success_count >= 3 and state != "up":
                # –°–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è–ª—Å—è ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
                subscribed_users = await get_subscribed_users()
                for user in subscribed_users:
                    await bot.send_message(user.tg_id, "‚úÖ Minecraft —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                state = "up"
        else:
            if failure_count >= 3 and state != "down":
                # –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
                subscribed_users = await get_subscribed_users()
                for user in subscribed_users:
                    await bot.send_message(user.tg_id, "‚ö†Ô∏è Minecraft —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                state = "down"

        await asyncio.sleep(10) 


async def periodic_save_task():
    while True:
        await asyncio.sleep(300) 
        result = run_rcon_command("save-all")
        logging.info(f"[save-all] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")


def get_server_stats(host: str, port: int, password: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞ Minecraft –ø–æ RCON.
    """
    try:
        with MCRcon(host, password, port=port) as mcr:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            list_resp = mcr.command("list")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å TPS (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try:
                tps_resp = mcr.command("tps")
            except Exception:
                tps_resp = "TPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë
            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
                f"üë• –û–Ω–ª–∞–π–Ω:\n{list_resp}\n\n"
                f"‚öôÔ∏è TPS:\n{tps_resp}\n"
            )

            return stats_text
    except Exception as e:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:\n{e}"
    

def run_rcon_command(command: str, host=config.mc_host.get_secret_value(), port=config.rcon_port, password=config.rcon_pass.get_secret_value()):
    try:
        with MCRcon(host, password, port=port) as mcr:
            return mcr.command(command)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ RCON: {e}"
    

async def run_rcon_command2(command: str):
    try:
        client = RconClient(
            host=config.mc_host.get_secret_value(),
            port=config.rcon_port,
            password=config.rcon_pass.get_secret_value()
        )
        client.connect()
        result = await client.run_command_async(command)
        client.disconnect()
        return result
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ RCON: {e}"
    

def run_ssh_command(
    command: str,
    host=config.mc_host.get_secret_value(),
    port=config.ssh_port,
    user=config.ssh_user.get_secret_value(),
    password=config.ssh_pass.get_secret_value()
):
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        client.connect(hostname=host, port=port, username=user, password=password)

        stdin, stdout, stderr = client.exec_command(command)
        out = stdout.read().decode()
        err = stderr.read().decode()

        client.close()

        if err:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n{err.strip()}"
        return out.strip() if out.strip() else "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç."

    except Exception as e:
        return f"‚ùå SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}"
    

async def get_last_death_location(mc_name: str) -> str | None:
    command=f"/data get entity {mc_name} LastDeathLocation"
    response = await run_rcon_command2(command)
    match = re.search(r"pos: \[I; (-?\d+), (-?\d+), (-?\d+)\]", response)
    if match:
        x, y, z = match.groups()
        return f"X={x}, Y={y}, Z={z}"
    return None
    

async def get_telegram_id_by_mc_name(mc_name: str) -> int | None:
    async with async_session() as session:
        stmt = select(User).where(User.mc_name == mc_name)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if user:
            return user.tg_id
        return None
    

async def notify_player_death(mc_name: str, death_reason: str):
    tg_id = await get_telegram_id_by_mc_name(mc_name)
    if not tg_id:
        await bot.send_message(config.admin_id, f"üíÄ –ò–≥—Ä–æ–∫ {mc_name} —É–º–µ—Ä, Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    coords = await get_last_death_location(mc_name)
    
    text = f"üíÄ –¢—ã ({mc_name}) —É–º–µ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n–ü—Ä–∏—á–∏–Ω–∞: {death_reason}"
    if coords:
        text += f"\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–º–µ—Ä—Ç–∏: {coords}"
    
    await bot.send_message(tg_id, text)

    admin_text = f"üíÄ –£–º–µ—Ä {mc_name}."
    if coords:
        admin_text += f" –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}"
    await bot.send_message(config.admin_id, admin_text)


async def process_log_line(line: str):

    match = re.search(r'\]: ([^\s]+) joined the game', line)
    if match:
        player = match.group(1)
        logging.info(f"üü¢ –ò–≥—Ä–æ–∫ {player} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        await bot.send_message(config.admin_id, f"üü¢ –ò–≥—Ä–æ–∫ {player} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")

    match_leave = re.search(r'\]: ([^\s]+) left the game', line)
    if match_leave:
        player = match_leave.group(1)
        logging.info(f"üî¥ –ò–≥—Ä–æ–∫ {player} –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞!")
        await bot.send_message(config.admin_id, f"üî¥ –ò–≥—Ä–æ–∫ {player} –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞!")
        return
    
    match_chat_alt = re.search(r'\[Not Secure\] <([^>]+)> (.+)', line)
    if match_chat_alt:
        player = match_chat_alt.group(1)
        message = match_chat_alt.group(2)
        logging.info(f"üí¨ {player}: {message}")
        await bot.send_message(config.admin_id, f"üí¨ {player}: {message}")
        return
    
    match_chat = re.search(r'\]: ([^\s]+): (.+)', line)
    if match_chat:
        player = match_chat.group(1)
        message = match_chat.group(2)
        logging.info(f"üí¨ {player}: {message}")
        await bot.send_message(config.admin_id, f"üí¨ {player}: {message}")
        return
    
    for pattern in cs.death_patterns:
        if pattern in line:
            player_match = re.search(r'\]: \[\d{2}:\d{2}:\d{2} INFO\]: (\S+)', line)
            player = player_match.group(1) if player_match else "–ò–≥—Ä–æ–∫"

            if player is None:
                logging.warning("–ù–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏–∫ —É–º–µ—Ä—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–æ–≥–∞.")
                return

            logging.info(f"üíÄ –ò–≥—Ä–æ–∫ {player} —É–º–µ—Ä! –ü—Ä–∏—á–∏–Ω–∞: {pattern}")

            await notify_player_death(player, pattern)

            return
    

def ssh_log_reader(host, port, user, password, queue: asyncio.Queue, loop: asyncio.AbstractEventLoop):
    client = None
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname=host, port=port, username=user, password=password)

        stdin, stdout, stderr = client.exec_command("journalctl -u minecraft -f")

        for line in iter(stdout.readline, ""):
            if line:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ asyncio –æ—á–µ—Ä–µ–¥—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                asyncio.run_coroutine_threadsafe(queue.put(line.strip()), loop)

    except Exception as e:
        logging.error(f"SSH error: {e}")
        asyncio.run_coroutine_threadsafe(queue.put(f"‚ùå SSH error: {e}"), loop)
    finally:
        if client:
            try:
                client.close()
            except Exception:
                pass
    

async def log_watcher_task(host, port, user, password):
    queue = asyncio.Queue()
    loop = asyncio.get_running_loop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º ssh_log_reader –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop.run_in_executor(None, ssh_log_reader, host, port, user, password, queue, loop)

    try:
        while True:
            line = await queue.get()
            await process_log_line(line)
    except asyncio.CancelledError:
        logging.info("Log watcher task cancelled")
        raise


async def update_mc_name(tg_id: int, mc_name: str):
    async with async_session() as session:
        stmt = update(User).where(User.tg_id == tg_id).values(mc_name=mc_name)
        await session.execute(stmt)
        await session.commit()


async def get_scoreboard_stat(mc_name: str, objective: str) -> int | str:
    command = f"scoreboard players get {mc_name} {objective}"
    output = await run_rcon_command2(command)

    print(f"RCON –æ—Ç–≤–µ—Ç: {output}")

    if "Can't get value" in output or "none is set" in output:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    match = re.search(r"has (\d+)", output)
    if match:
        return int(match.group(1))
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"


async def get_player_stats(mc_name: str) -> str:
    stats_lines = [f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ <b>{mc_name}</b>:"]

    for obj in cs.OBJECTIVES:
        ru_name = cs.OBJECTIVES_RU.get(obj.lower(), obj) 
        val = await get_scoreboard_stat(mc_name, obj)

        if obj == "walk_km" and isinstance(val, int):
            val = f"{val / 1000:.2f}"

        stats_lines.append(f"‚Ä¢ {ru_name}: {val}")

    return "\n".join(stats_lines)